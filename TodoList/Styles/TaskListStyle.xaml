<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TodoList.Styles"
                    xmlns:helpers="clr-namespace:TodoList.Helpers"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity">

    <helpers:ListToVisibilityConverter x:Key="ListToVisibilityConverter"></helpers:ListToVisibilityConverter>
    <helpers:ListToVisibilityNegatedConverter x:Key="ListToVisibilityNegatedConverter"></helpers:ListToVisibilityNegatedConverter>
    <helpers:TaskAndShowCompletedToVisibilityConverter x:Key="TaskAndShowCompletedToVisibilityConverter"></helpers:TaskAndShowCompletedToVisibilityConverter>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"></BooleanToVisibilityConverter>


    <ControlTemplate x:Key="TaskListItemCheckBoxTemplate" TargetType="CheckBox">
        <CheckBox IsChecked="{Binding Completed, Mode=TwoWay}">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Checked">
                    <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor, 
AncestorType={x:Type Window}}, Path=DataContext.ItemCheckedCommand}"
                                               CommandParameter="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, 
AncestorType={x:Type CheckBox}}}"></i:InvokeCommandAction>
                </i:EventTrigger>
                <i:EventTrigger EventName="Unchecked">
                    <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor, 
AncestorType={x:Type Window}}, Path=DataContext.ItemUncheckedCommand}"
                                               CommandParameter="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, 
AncestorType={x:Type CheckBox}}}"></i:InvokeCommandAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </CheckBox>
    </ControlTemplate>

    <DataTemplate x:Key="TaskListItemWithDateTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="80"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <CheckBox Template="{StaticResource TaskListItemCheckBoxTemplate}"></CheckBox>
            <TextBlock Grid.Column="1" Text="{Binding Name, Mode=TwoWay}"></TextBlock>
            <TextBlock Grid.Column="2" 
                       Text="{Binding DueToDate, StringFormat=d, Mode=TwoWay}"
                       HorizontalAlignment="Right"></TextBlock>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="TaskListItemTemplate">
        <StackPanel Orientation="Horizontal">
            <CheckBox Template="{StaticResource TaskListItemCheckBoxTemplate}" Width="20"></CheckBox>
            <TextBlock Text="{Binding Name, Mode=TwoWay}"></TextBlock>
        </StackPanel>
    </DataTemplate>

    <ContextMenu x:Key="TaskListContextMenuTemplate">
        <MenuItem Header="Edytuj" 
                  Command="{Binding SendEventThatSomethingShouldEnableUserToEditTaskCommand}"
                  CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, 
AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItem}"/>
        <MenuItem Header="Usuń"
                  Command="{Binding DeleteTodoCommand}"
                  CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, 
AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItem}" />
    </ContextMenu>
    
    <SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>
    <Style x:Key="ListBoxWithoutScrollViewer" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TaskListBoxItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Visibility">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource TaskAndShowCompletedToVisibilityConverter}">
                    <Binding Path="Completed"></Binding>
                    <Binding Path="DataContext.ShowCompleted" RelativeSource="{RelativeSource FindAncestor, 
AncestorType={x:Type Window}}"></Binding>
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>